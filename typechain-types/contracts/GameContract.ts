/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace GameContract {
  export type TableStruct = {
    serialNumber: PromiseOrValue<BigNumberish>;
    playersNow: PromiseOrValue<BigNumberish>;
    players: PromiseOrValue<string>[];
    playingTokenIds: PromiseOrValue<BigNumberish>[];
    playingSuits: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    currentGameStartedAt: PromiseOrValue<BigNumberish>;
    lastGameFinishedAt: PromiseOrValue<BigNumberish>;
    internalGameReduction: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type TableStructOutput = [
    BigNumber,
    number,
    string[],
    BigNumber[],
    [BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    serialNumber: BigNumber;
    playersNow: number;
    players: string[];
    playingTokenIds: BigNumber[];
    playingSuits: [BigNumber, BigNumber, BigNumber, BigNumber];
    currentGameStartedAt: BigNumber;
    lastGameFinishedAt: BigNumber;
    internalGameReduction: BigNumber;
    status: BigNumber;
  };

  export type BlackTableStructStruct = {
    serialNumber: PromiseOrValue<BigNumberish>;
    playersNow: PromiseOrValue<BigNumberish>;
    players: PromiseOrValue<string>[];
    playingTokenIds: PromiseOrValue<BigNumberish>[];
    playersTimeMarks: PromiseOrValue<BigNumberish>[];
    readyToClaimAt: PromiseOrValue<BigNumberish>;
    timeUntilRaffleExecution: PromiseOrValue<BigNumberish>;
    lastGameFinishedAt: PromiseOrValue<BigNumberish>;
    stakingRate: PromiseOrValue<BigNumberish>;
    amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>;
    amountWinnersToPayout: PromiseOrValue<BigNumberish>;
    amountTokensForRaffle: PromiseOrValue<BigNumberish>;
    raffleNFTTokenId: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type BlackTableStructStructOutput = [
    BigNumber,
    number,
    string[],
    BigNumber[],
    BigNumber[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    serialNumber: BigNumber;
    playersNow: number;
    players: string[];
    playingTokenIds: BigNumber[];
    playersTimeMarks: BigNumber[];
    readyToClaimAt: BigNumber;
    timeUntilRaffleExecution: BigNumber;
    lastGameFinishedAt: BigNumber;
    stakingRate: BigNumber;
    amountPlayersUntilCurrentRaffle: BigNumber;
    amountWinnersToPayout: BigNumber;
    amountTokensForRaffle: BigNumber;
    raffleNFTTokenId: BigNumber;
    status: BigNumber;
  };
}

export interface GameContractInterface extends utils.Interface {
  functions: {
    "ClaimSingleGame(uint8,uint256,uint256)": FunctionFragment;
    "Collection()": FunctionFragment;
    "GetCurrentTableInRoom(uint8,uint256)": FunctionFragment;
    "GetWholeRoom(uint8)": FunctionFragment;
    "RaffleNFT()": FunctionFragment;
    "RaffleToken()": FunctionFragment;
    "Reduct()": FunctionFragment;
    "acceptMoney()": FunctionFragment;
    "addPlayer(uint8,uint256,uint256,address)": FunctionFragment;
    "addPlayerByPlace(uint8,uint256,uint256,address)": FunctionFragment;
    "addPlayingTokenId(uint8,uint256,uint256,uint256)": FunctionFragment;
    "advancedBulkEnterInGame(uint8,uint256,uint256[])": FunctionFragment;
    "advancedBulkEnterInGameWithPlace(uint8,uint256,uint256[],uint256[])": FunctionFragment;
    "allTables(uint8,uint256)": FunctionFragment;
    "amountGamesUntilIncrease()": FunctionFragment;
    "amountGamesUntilNewTrump()": FunctionFragment;
    "balanceOfRaffleTokens()": FunctionFragment;
    "baseGameDuration()": FunctionFragment;
    "blackTable()": FunctionFragment;
    "bulkCheckNFTRoomLevel(uint256[],uint8)": FunctionFragment;
    "bulkCheckNotTransferable(uint256[])": FunctionFragment;
    "bulkEnterInBlackRoom(uint256[])": FunctionFragment;
    "calculateGameDuration(uint8,uint256)": FunctionFragment;
    "calculateStakingRewardsInBlackRoom()": FunctionFragment;
    "checkAllGenesis(uint256[])": FunctionFragment;
    "checkInMemoryArray(uint256[],uint256)": FunctionFragment;
    "checkOwnershipOfTokens(uint256[])": FunctionFragment;
    "claimBlackRoom(uint256)": FunctionFragment;
    "claimReadyTablesInRoom(uint8,uint256)": FunctionFragment;
    "claimStakingTokensFromBlackRoom()": FunctionFragment;
    "cooldownTime()": FunctionFragment;
    "createTableInRoom(uint8)": FunctionFragment;
    "currentAmountGamesFinished(uint8)": FunctionFragment;
    "currentRoomGameDuration(uint8)": FunctionFragment;
    "decrPlayersNow(uint8,uint256)": FunctionFragment;
    "decrPlayersNowInBlackTable()": FunctionFragment;
    "decrPlayersNowinBlack()": FunctionFragment;
    "decrPlayingSuits(uint8,uint256,uint256,uint256)": FunctionFragment;
    "deletePlayerInBlackRoomByIndex(uint256,uint256)": FunctionFragment;
    "deletePlayerInBlackRoomByIndexV2(uint256)": FunctionFragment;
    "deletePlayerInTableByIndex(uint8,uint256,uint256,uint256)": FunctionFragment;
    "estimateStakingRewardsInBlackRoom(address)": FunctionFragment;
    "findAvailableTable(uint8,uint256)": FunctionFragment;
    "generateRandomWinnerIndexInBlackRoom(uint256)": FunctionFragment;
    "getActiveTablesForPlayer(address)": FunctionFragment;
    "getActiveTablesForRoom(uint8)": FunctionFragment;
    "getAmountTokensRaffleInBlackRoom()": FunctionFragment;
    "getAmountWinnersToPayoutinBlackRoom()": FunctionFragment;
    "getBlackTable()": FunctionFragment;
    "getBlackTableAmountPlayersUntilCurrentRaffle()": FunctionFragment;
    "getBlackTableAmountWinnersToPayout()": FunctionFragment;
    "getBlackTablePlayerByIndex(uint256)": FunctionFragment;
    "getBlackTablePlayersLength()": FunctionFragment;
    "getBlackTablePlayersNow()": FunctionFragment;
    "getBlackTablePlayingTokenIdByIndex(uint256)": FunctionFragment;
    "getBlackTablePrizeRadioChoice()": FunctionFragment;
    "getBlackTableReadyToClaimAt()": FunctionFragment;
    "getBlackTableStatus()": FunctionFragment;
    "getBlackTableTimeUntilRaffleExecution()": FunctionFragment;
    "getCurrentStatusForTable(uint8,uint256)": FunctionFragment;
    "getGameDuration(uint8,uint256)": FunctionFragment;
    "getIndexOfPlayerInBlackRoom(address)": FunctionFragment;
    "getIndexesOfPlayerInBlackRoom(address)": FunctionFragment;
    "getPlayerOnTableByIndex(uint8,uint256,uint256)": FunctionFragment;
    "getPlayersLengthInTable(uint8,uint256)": FunctionFragment;
    "getPlayersNowForTable(uint8,uint256)": FunctionFragment;
    "getPlayersNowInBlackRoom()": FunctionFragment;
    "getPlayingSuitsSlotForTableInRoom(uint8,uint256,uint256)": FunctionFragment;
    "getPlayingTokenIdInTableByIndex(uint8,uint256,uint256)": FunctionFragment;
    "getRaffleNFTTokenIdInBlackRoom()": FunctionFragment;
    "getRandomSuit(uint256)": FunctionFragment;
    "getStatusForTable(uint8,uint256)": FunctionFragment;
    "getTablesClaimReadyInRoom(uint8)": FunctionFragment;
    "getTimeWhenTableIsClaimReady(uint8,uint256)": FunctionFragment;
    "getValue1(uint256)": FunctionFragment;
    "getValue2(uint256)": FunctionFragment;
    "globalLastGameFinishedAt()": FunctionFragment;
    "helper()": FunctionFragment;
    "helper1()": FunctionFragment;
    "incrBlackTableSerialNumber()": FunctionFragment;
    "incrInternalGameReduction(uint8,uint256,uint256)": FunctionFragment;
    "incrPlayersNow(uint8,uint256)": FunctionFragment;
    "incrPlayersNowinBlack()": FunctionFragment;
    "incrPlayingSuits(uint8,uint256,uint256,uint256)": FunctionFragment;
    "isDoubleIncrNFTRoomLevel(uint256)": FunctionFragment;
    "isMintPass(uint256)": FunctionFragment;
    "isOwnerOfRaffleNFT()": FunctionFragment;
    "isTableClaimReady(uint8,uint256)": FunctionFragment;
    "isTableInRoomExists(uint8,uint256)": FunctionFragment;
    "leaveBlackTable(uint256[])": FunctionFragment;
    "leaveGame(uint8,uint256,uint256[])": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "prizeRadioChoice()": FunctionFragment;
    "pushInBlackTable(address,uint256,uint256)": FunctionFragment;
    "raffleNFTTokenId()": FunctionFragment;
    "refandRate()": FunctionFragment;
    "refundYourNFT(uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "replaceInBlackTable(uint256,address,uint256,uint256)": FunctionFragment;
    "returnSerialNumber(uint8,uint256)": FunctionFragment;
    "returnTimesPlayerInBlackRoom(address)": FunctionFragment;
    "roomGameDurationIncreaseCounter(uint8)": FunctionFragment;
    "sendRaffleNFTToWinner(address,uint256)": FunctionFragment;
    "sendRaffleTokens(address,uint256)": FunctionFragment;
    "setAmountGamesUntilIncrease(uint256)": FunctionFragment;
    "setAmountGamesUntilNewTrump(uint256)": FunctionFragment;
    "setBaseGameDuration(uint256)": FunctionFragment;
    "setBlackTableLastGameFinishedAt(uint256)": FunctionFragment;
    "setBlackTableStatus(uint256)": FunctionFragment;
    "setCurrentGameStartedAt(uint8,uint256,uint256)": FunctionFragment;
    "setGlobalLastGameFinishedAt(uint256)": FunctionFragment;
    "setIsMintPass(uint256,bool)": FunctionFragment;
    "setLastGameFinishedAt(uint8,uint256,uint256)": FunctionFragment;
    "setPrizeRadioChoise(uint8)": FunctionFragment;
    "setReadyToClaimAtInBlack(uint256)": FunctionFragment;
    "setRefundRate(uint256)": FunctionFragment;
    "setStakingRateinBlackRoom(uint256)": FunctionFragment;
    "setStatus(uint8,uint256,uint256)": FunctionFragment;
    "setStatusinBlack(uint256)": FunctionFragment;
    "setTempVariablesInBlackTableinBlack(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setTimeUntilRaffleExecutionInBlack(uint256)": FunctionFragment;
    "setTrump(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "trump()": FunctionFragment;
    "trumpCounter()": FunctionFragment;
    "viewAmountTablesInRoom(uint8)": FunctionFragment;
    "viewCooldownTime()": FunctionFragment;
    "viewGlobalLastGameFinishedAt()": FunctionFragment;
    "viewHelper()": FunctionFragment;
    "viewHelper1()": FunctionFragment;
    "viewTrump()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ClaimSingleGame"
      | "Collection"
      | "GetCurrentTableInRoom"
      | "GetWholeRoom"
      | "RaffleNFT"
      | "RaffleToken"
      | "Reduct"
      | "acceptMoney"
      | "addPlayer"
      | "addPlayerByPlace"
      | "addPlayingTokenId"
      | "advancedBulkEnterInGame"
      | "advancedBulkEnterInGameWithPlace"
      | "allTables"
      | "amountGamesUntilIncrease"
      | "amountGamesUntilNewTrump"
      | "balanceOfRaffleTokens"
      | "baseGameDuration"
      | "blackTable"
      | "bulkCheckNFTRoomLevel"
      | "bulkCheckNotTransferable"
      | "bulkEnterInBlackRoom"
      | "calculateGameDuration"
      | "calculateStakingRewardsInBlackRoom"
      | "checkAllGenesis"
      | "checkInMemoryArray"
      | "checkOwnershipOfTokens"
      | "claimBlackRoom"
      | "claimReadyTablesInRoom"
      | "claimStakingTokensFromBlackRoom"
      | "cooldownTime"
      | "createTableInRoom"
      | "currentAmountGamesFinished"
      | "currentRoomGameDuration"
      | "decrPlayersNow"
      | "decrPlayersNowInBlackTable"
      | "decrPlayersNowinBlack"
      | "decrPlayingSuits"
      | "deletePlayerInBlackRoomByIndex"
      | "deletePlayerInBlackRoomByIndexV2"
      | "deletePlayerInTableByIndex"
      | "estimateStakingRewardsInBlackRoom"
      | "findAvailableTable"
      | "generateRandomWinnerIndexInBlackRoom"
      | "getActiveTablesForPlayer"
      | "getActiveTablesForRoom"
      | "getAmountTokensRaffleInBlackRoom"
      | "getAmountWinnersToPayoutinBlackRoom"
      | "getBlackTable"
      | "getBlackTableAmountPlayersUntilCurrentRaffle"
      | "getBlackTableAmountWinnersToPayout"
      | "getBlackTablePlayerByIndex"
      | "getBlackTablePlayersLength"
      | "getBlackTablePlayersNow"
      | "getBlackTablePlayingTokenIdByIndex"
      | "getBlackTablePrizeRadioChoice"
      | "getBlackTableReadyToClaimAt"
      | "getBlackTableStatus"
      | "getBlackTableTimeUntilRaffleExecution"
      | "getCurrentStatusForTable"
      | "getGameDuration"
      | "getIndexOfPlayerInBlackRoom"
      | "getIndexesOfPlayerInBlackRoom"
      | "getPlayerOnTableByIndex"
      | "getPlayersLengthInTable"
      | "getPlayersNowForTable"
      | "getPlayersNowInBlackRoom"
      | "getPlayingSuitsSlotForTableInRoom"
      | "getPlayingTokenIdInTableByIndex"
      | "getRaffleNFTTokenIdInBlackRoom"
      | "getRandomSuit"
      | "getStatusForTable"
      | "getTablesClaimReadyInRoom"
      | "getTimeWhenTableIsClaimReady"
      | "getValue1"
      | "getValue2"
      | "globalLastGameFinishedAt"
      | "helper"
      | "helper1"
      | "incrBlackTableSerialNumber"
      | "incrInternalGameReduction"
      | "incrPlayersNow"
      | "incrPlayersNowinBlack"
      | "incrPlayingSuits"
      | "isDoubleIncrNFTRoomLevel"
      | "isMintPass"
      | "isOwnerOfRaffleNFT"
      | "isTableClaimReady"
      | "isTableInRoomExists"
      | "leaveBlackTable"
      | "leaveGame"
      | "onERC721Received"
      | "owner"
      | "prizeRadioChoice"
      | "pushInBlackTable"
      | "raffleNFTTokenId"
      | "refandRate"
      | "refundYourNFT"
      | "renounceOwnership"
      | "replaceInBlackTable"
      | "returnSerialNumber"
      | "returnTimesPlayerInBlackRoom"
      | "roomGameDurationIncreaseCounter"
      | "sendRaffleNFTToWinner"
      | "sendRaffleTokens"
      | "setAmountGamesUntilIncrease"
      | "setAmountGamesUntilNewTrump"
      | "setBaseGameDuration"
      | "setBlackTableLastGameFinishedAt"
      | "setBlackTableStatus"
      | "setCurrentGameStartedAt"
      | "setGlobalLastGameFinishedAt"
      | "setIsMintPass"
      | "setLastGameFinishedAt"
      | "setPrizeRadioChoise"
      | "setReadyToClaimAtInBlack"
      | "setRefundRate"
      | "setStakingRateinBlackRoom"
      | "setStatus"
      | "setStatusinBlack"
      | "setTempVariablesInBlackTableinBlack"
      | "setTimeUntilRaffleExecutionInBlack"
      | "setTrump"
      | "transferOwnership"
      | "trump"
      | "trumpCounter"
      | "viewAmountTablesInRoom"
      | "viewCooldownTime"
      | "viewGlobalLastGameFinishedAt"
      | "viewHelper"
      | "viewHelper1"
      | "viewTrump"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ClaimSingleGame",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "Collection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GetCurrentTableInRoom",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetWholeRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "RaffleNFT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "RaffleToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "Reduct", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptMoney",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPlayer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlayerByPlace",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlayingTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "advancedBulkEnterInGame",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "advancedBulkEnterInGameWithPlace",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allTables",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "amountGamesUntilIncrease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountGamesUntilNewTrump",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfRaffleTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseGameDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blackTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCheckNFTRoomLevel",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCheckNotTransferable",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkEnterInBlackRoom",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateGameDuration",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStakingRewardsInBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllGenesis",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkInMemoryArray",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOwnershipOfTokens",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBlackRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReadyTablesInRoom",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakingTokensFromBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createTableInRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentAmountGamesFinished",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRoomGameDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayersNow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayersNowInBlackTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayersNowinBlack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayingSuits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePlayerInBlackRoomByIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePlayerInBlackRoomByIndexV2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePlayerInTableByIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateStakingRewardsInBlackRoom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "findAvailableTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "generateRandomWinnerIndexInBlackRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTablesForPlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveTablesForRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountTokensRaffleInBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountWinnersToPayoutinBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableAmountPlayersUntilCurrentRaffle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableAmountWinnersToPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayersNow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayingTokenIdByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePrizeRadioChoice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableReadyToClaimAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableTimeUntilRaffleExecution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentStatusForTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameDuration",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexOfPlayerInBlackRoom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexesOfPlayerInBlackRoom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerOnTableByIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayersLengthInTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayersNowForTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayersNowInBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayingSuitsSlotForTableInRoom",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayingTokenIdInTableByIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleNFTTokenIdInBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomSuit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatusForTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTablesClaimReadyInRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeWhenTableIsClaimReady",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValue1",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValue2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLastGameFinishedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "helper", values?: undefined): string;
  encodeFunctionData(functionFragment: "helper1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "incrBlackTableSerialNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrInternalGameReduction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "incrPlayersNow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incrPlayersNowinBlack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrPlayingSuits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isDoubleIncrNFTRoomLevel",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintPass",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOfRaffleNFT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTableClaimReady",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTableInRoomExists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveBlackTable",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "leaveGame",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prizeRadioChoice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushInBlackTable",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleNFTTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refandRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundYourNFT",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "replaceInBlackTable",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "returnSerialNumber",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "returnTimesPlayerInBlackRoom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roomGameDurationIncreaseCounter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRaffleNFTToWinner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRaffleTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountGamesUntilIncrease",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAmountGamesUntilNewTrump",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseGameDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackTableLastGameFinishedAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackTableStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentGameStartedAt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalLastGameFinishedAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsMintPass",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastGameFinishedAt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrizeRadioChoise",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReadyToClaimAtInBlack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRefundRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingRateinBlackRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatusinBlack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTempVariablesInBlackTableinBlack",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeUntilRaffleExecutionInBlack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrump",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "trump", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "trumpCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewAmountTablesInRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCooldownTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewGlobalLastGameFinishedAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewHelper1",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "viewTrump", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ClaimSingleGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Collection", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GetCurrentTableInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetWholeRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RaffleNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "RaffleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Reduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptMoney",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPlayerByPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addPlayingTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advancedBulkEnterInGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "advancedBulkEnterInGameWithPlace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allTables", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "amountGamesUntilIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountGamesUntilNewTrump",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfRaffleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseGameDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blackTable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bulkCheckNFTRoomLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkCheckNotTransferable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkEnterInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateGameDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStakingRewardsInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkInMemoryArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOwnershipOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReadyTablesInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStakingTokensFromBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTableInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentAmountGamesFinished",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRoomGameDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayersNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayersNowInBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayersNowinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayingSuits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePlayerInBlackRoomByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePlayerInBlackRoomByIndexV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePlayerInTableByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateStakingRewardsInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findAvailableTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRandomWinnerIndexInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTablesForPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveTablesForRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountTokensRaffleInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountWinnersToPayoutinBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableAmountPlayersUntilCurrentRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableAmountWinnersToPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayersNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayingTokenIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePrizeRadioChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableReadyToClaimAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableTimeUntilRaffleExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentStatusForTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexOfPlayerInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexesOfPlayerInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerOnTableByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayersLengthInTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayersNowForTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayersNowInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayingSuitsSlotForTableInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayingTokenIdInTableByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleNFTTokenIdInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomSuit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatusForTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTablesClaimReadyInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeWhenTableIsClaimReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getValue2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "helper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "helper1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrBlackTableSerialNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrInternalGameReduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrPlayersNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrPlayersNowinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrPlayingSuits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDoubleIncrNFTRoomLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMintPass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isOwnerOfRaffleNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTableClaimReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTableInRoomExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leaveBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leaveGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prizeRadioChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushInBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleNFTTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refandRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundYourNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceInBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnSerialNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "returnTimesPlayerInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roomGameDurationIncreaseCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRaffleNFTToWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRaffleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountGamesUntilIncrease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAmountGamesUntilNewTrump",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBaseGameDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackTableLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackTableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentGameStartedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsMintPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrizeRadioChoise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReadyToClaimAtInBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRefundRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingRateinBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStatusinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTempVariablesInBlackTableinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeUntilRaffleExecutionInBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTrump", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trump", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "trumpCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewAmountTablesInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCooldownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewGlobalLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewHelper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewHelper1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewTrump", data: BytesLike): Result;

  events: {
    "ClaimedStakingTokens(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "blackRoomClaimedPrizeMintPass(address[],uint256[],uint256)": EventFragment;
    "blackRoomClaimedPrizeRaffleNFT(address,uint256,uint256)": EventFragment;
    "blackRoomClaimedPrizeRaffleToken(address[],uint256,uint256)": EventFragment;
    "some(uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimedStakingTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "blackRoomClaimedPrizeMintPass"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "blackRoomClaimedPrizeRaffleNFT"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "blackRoomClaimedPrizeRaffleToken"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "some"): EventFragment;
}

export interface ClaimedStakingTokensEventObject {
  player: string;
  amount: BigNumber;
  claimTimestamp: BigNumber;
}
export type ClaimedStakingTokensEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ClaimedStakingTokensEventObject
>;

export type ClaimedStakingTokensEventFilter =
  TypedEventFilter<ClaimedStakingTokensEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface blackRoomClaimedPrizeMintPassEventObject {
  tempWinners: string[];
  tempInvolvedTokenIds: BigNumber[];
  prizeRadioChoice: BigNumber;
}
export type blackRoomClaimedPrizeMintPassEvent = TypedEvent<
  [string[], BigNumber[], BigNumber],
  blackRoomClaimedPrizeMintPassEventObject
>;

export type blackRoomClaimedPrizeMintPassEventFilter =
  TypedEventFilter<blackRoomClaimedPrizeMintPassEvent>;

export interface blackRoomClaimedPrizeRaffleNFTEventObject {
  winner: string;
  tokenId: BigNumber;
  prizeRadioChoice: BigNumber;
}
export type blackRoomClaimedPrizeRaffleNFTEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  blackRoomClaimedPrizeRaffleNFTEventObject
>;

export type blackRoomClaimedPrizeRaffleNFTEventFilter =
  TypedEventFilter<blackRoomClaimedPrizeRaffleNFTEvent>;

export interface blackRoomClaimedPrizeRaffleTokenEventObject {
  tempWinners: string[];
  value: BigNumber;
  prizeRadioChoice: BigNumber;
}
export type blackRoomClaimedPrizeRaffleTokenEvent = TypedEvent<
  [string[], BigNumber, BigNumber],
  blackRoomClaimedPrizeRaffleTokenEventObject
>;

export type blackRoomClaimedPrizeRaffleTokenEventFilter =
  TypedEventFilter<blackRoomClaimedPrizeRaffleTokenEvent>;

export interface someEventObject {
  _data: BigNumber[];
}
export type someEvent = TypedEvent<[BigNumber[]], someEventObject>;

export type someEventFilter = TypedEventFilter<someEvent>;

export interface GameContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ClaimSingleGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Collection(overrides?: CallOverrides): Promise<[string]>;

    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GameContract.TableStructOutput]>;

    GetWholeRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[GameContract.TableStructOutput[]]>;

    RaffleNFT(overrides?: CallOverrides): Promise<[string]>;

    RaffleToken(overrides?: CallOverrides): Promise<[string]>;

    Reduct(overrides?: CallOverrides): Promise<[string]>;

    acceptMoney(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPlayerByPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      place: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    advancedBulkEnterInGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    advancedBulkEnterInGameWithPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _placeIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        serialNumber: BigNumber;
        playersNow: number;
        currentGameStartedAt: BigNumber;
        lastGameFinishedAt: BigNumber;
        internalGameReduction: BigNumber;
        status: BigNumber;
      }
    >;

    amountGamesUntilIncrease(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountGamesUntilNewTrump(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOfRaffleTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseGameDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    blackTable(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        serialNumber: BigNumber;
        playersNow: number;
        readyToClaimAt: BigNumber;
        timeUntilRaffleExecution: BigNumber;
        lastGameFinishedAt: BigNumber;
        stakingRate: BigNumber;
        amountPlayersUntilCurrentRaffle: BigNumber;
        amountWinnersToPayout: BigNumber;
        amountTokensForRaffle: BigNumber;
        raffleNFTTokenId: BigNumber;
        status: BigNumber;
      }
    >;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bulkCheckNotTransferable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateStakingRewardsInBlackRoom(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkInMemoryArray(
      tempArr: PromiseOrValue<BigNumberish>[],
      _currentIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimReadyTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimStakingTokensFromBlackRoom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cooldownTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    createTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentAmountGamesFinished(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRoomGameDuration(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrPlayersNowInBlackTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    estimateStakingRewardsInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    generateRandomWinnerIndexInBlackRoom(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getActiveTablesForPlayer(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[][]]>;

    getActiveTablesForRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTable(
      overrides?: CallOverrides
    ): Promise<[GameContract.BlackTableStructStructOutput]>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBlackTablePlayersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlackTablePlayersNow(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTableReadyToClaimAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTableStatus(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIndexOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRandomSuit(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTablesClaimReadyInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getTimeWhenTableIsClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValue1(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getValue2(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    globalLastGameFinishedAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    helper(overrides?: CallOverrides): Promise<[string]>;

    helper1(overrides?: CallOverrides): Promise<[string]>;

    incrBlackTableSerialNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isDoubleIncrNFTRoomLevel(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMintPass(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwnerOfRaffleNFT(overrides?: CallOverrides): Promise<[boolean]>;

    isTableClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    leaveBlackTable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leaveGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    prizeRadioChoice(overrides?: CallOverrides): Promise<[BigNumber]>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    raffleNFTTokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    refandRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundYourNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    returnSerialNumber(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    returnTimesPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    roomGameDurationIncreaseCounter(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAmountGamesUntilIncrease(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAmountGamesUntilNewTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseGameDuration(
      _newTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPrizeRadioChoise(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRefundRate(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      _amountTokensRaffle: PromiseOrValue<BigNumberish>,
      _raffleNFTTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    trump(overrides?: CallOverrides): Promise<[BigNumber]>;

    trumpCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewAmountTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewCooldownTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewGlobalLastGameFinishedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewHelper(overrides?: CallOverrides): Promise<[string]>;

    viewHelper1(overrides?: CallOverrides): Promise<[string]>;

    viewTrump(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  ClaimSingleGame(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Collection(overrides?: CallOverrides): Promise<string>;

  GetCurrentTableInRoom(
    _room: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GameContract.TableStructOutput>;

  GetWholeRoom(
    _room: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<GameContract.TableStructOutput[]>;

  RaffleNFT(overrides?: CallOverrides): Promise<string>;

  RaffleToken(overrides?: CallOverrides): Promise<string>;

  Reduct(overrides?: CallOverrides): Promise<string>;

  acceptMoney(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPlayer(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPlayerByPlace(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    place: PromiseOrValue<BigNumberish>,
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPlayingTokenId(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  advancedBulkEnterInGame(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  advancedBulkEnterInGameWithPlace(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _placeIndexes: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allTables(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
      serialNumber: BigNumber;
      playersNow: number;
      currentGameStartedAt: BigNumber;
      lastGameFinishedAt: BigNumber;
      internalGameReduction: BigNumber;
      status: BigNumber;
    }
  >;

  amountGamesUntilIncrease(overrides?: CallOverrides): Promise<BigNumber>;

  amountGamesUntilNewTrump(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOfRaffleTokens(overrides?: CallOverrides): Promise<BigNumber>;

  baseGameDuration(overrides?: CallOverrides): Promise<BigNumber>;

  blackTable(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      serialNumber: BigNumber;
      playersNow: number;
      readyToClaimAt: BigNumber;
      timeUntilRaffleExecution: BigNumber;
      lastGameFinishedAt: BigNumber;
      stakingRate: BigNumber;
      amountPlayersUntilCurrentRaffle: BigNumber;
      amountWinnersToPayout: BigNumber;
      amountTokensForRaffle: BigNumber;
      raffleNFTTokenId: BigNumber;
      status: BigNumber;
    }
  >;

  bulkCheckNFTRoomLevel(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _roomLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bulkCheckNotTransferable(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  bulkEnterInBlackRoom(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateGameDuration(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateStakingRewardsInBlackRoom(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  checkAllGenesis(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkInMemoryArray(
    tempArr: PromiseOrValue<BigNumberish>[],
    _currentIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkOwnershipOfTokens(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimBlackRoom(
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimReadyTablesInRoom(
    _roomLevel: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimStakingTokensFromBlackRoom(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

  createTableInRoom(
    _room: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentAmountGamesFinished(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRoomGameDuration(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decrPlayersNow(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrPlayersNowInBlackTable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrPlayersNowinBlack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrPlayingSuits(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePlayerInBlackRoomByIndex(
    _index: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePlayerInBlackRoomByIndexV2(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePlayerInTableByIndex(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  estimateStakingRewardsInBlackRoom(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  findAvailableTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _remainAllocation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  generateRandomWinnerIndexInBlackRoom(
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getActiveTablesForPlayer(
    _who: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  getActiveTablesForRoom(
    _roomLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountTokensRaffleInBlackRoom(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountWinnersToPayoutinBlackRoom(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackTable(
    overrides?: CallOverrides
  ): Promise<GameContract.BlackTableStructStructOutput>;

  getBlackTableAmountPlayersUntilCurrentRaffle(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackTableAmountWinnersToPayout(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackTablePlayerByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlackTablePlayersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTablePlayersNow(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTablePlayingTokenIdByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackTablePrizeRadioChoice(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTableReadyToClaimAt(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTableStatus(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTableTimeUntilRaffleExecution(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentStatusForTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGameDuration(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIndexOfPlayerInBlackRoom(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIndexesOfPlayerInBlackRoom(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPlayerOnTableByIndex(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayersLengthInTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayersNowForTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

  getPlayingSuitsSlotForTableInRoom(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _slot: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayingTokenIdInTableByIndex(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRaffleNFTTokenIdInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

  getRandomSuit(
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStatusForTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTablesClaimReadyInRoom(
    _roomLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getTimeWhenTableIsClaimReady(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValue1(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getValue2(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  globalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

  helper(overrides?: CallOverrides): Promise<string>;

  helper1(overrides?: CallOverrides): Promise<string>;

  incrBlackTableSerialNumber(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrInternalGameReduction(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrPlayersNow(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrPlayersNowinBlack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrPlayingSuits(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isDoubleIncrNFTRoomLevel(
    salt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMintPass(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwnerOfRaffleNFT(overrides?: CallOverrides): Promise<boolean>;

  isTableClaimReady(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isTableInRoomExists(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  leaveBlackTable(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leaveGame(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  prizeRadioChoice(overrides?: CallOverrides): Promise<BigNumber>;

  pushInBlackTable(
    _player: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  raffleNFTTokenId(overrides?: CallOverrides): Promise<BigNumber>;

  refandRate(overrides?: CallOverrides): Promise<BigNumber>;

  refundYourNFT(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceInBlackTable(
    _index: PromiseOrValue<BigNumberish>,
    _player: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  returnSerialNumber(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  returnTimesPlayerInBlackRoom(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  roomGameDurationIncreaseCounter(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  sendRaffleNFTToWinner(
    _winner: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRaffleTokens(
    _who: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAmountGamesUntilIncrease(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAmountGamesUntilNewTrump(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseGameDuration(
    _newTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlackTableLastGameFinishedAt(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlackTableStatus(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrentGameStartedAt(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalLastGameFinishedAt(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsMintPass(
    _tokenId: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLastGameFinishedAt(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPrizeRadioChoise(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReadyToClaimAtInBlack(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRefundRate(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingRateinBlackRoom(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStatus(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStatusinBlack(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTempVariablesInBlackTableinBlack(
    _stakingRate: PromiseOrValue<BigNumberish>,
    _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
    _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
    _amountTokensRaffle: PromiseOrValue<BigNumberish>,
    _raffleNFTTokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeUntilRaffleExecutionInBlack(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTrump(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  trump(overrides?: CallOverrides): Promise<BigNumber>;

  trumpCounter(overrides?: CallOverrides): Promise<BigNumber>;

  viewAmountTablesInRoom(
    _roomLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  viewCooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

  viewGlobalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

  viewHelper(overrides?: CallOverrides): Promise<string>;

  viewHelper1(overrides?: CallOverrides): Promise<string>;

  viewTrump(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ClaimSingleGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    Collection(overrides?: CallOverrides): Promise<string>;

    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GameContract.TableStructOutput>;

    GetWholeRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<GameContract.TableStructOutput[]>;

    RaffleNFT(overrides?: CallOverrides): Promise<string>;

    RaffleToken(overrides?: CallOverrides): Promise<string>;

    Reduct(overrides?: CallOverrides): Promise<string>;

    acceptMoney(overrides?: CallOverrides): Promise<void>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPlayerByPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      place: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    advancedBulkEnterInGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    advancedBulkEnterInGameWithPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _placeIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    allTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, BigNumber, BigNumber, BigNumber] & {
        serialNumber: BigNumber;
        playersNow: number;
        currentGameStartedAt: BigNumber;
        lastGameFinishedAt: BigNumber;
        internalGameReduction: BigNumber;
        status: BigNumber;
      }
    >;

    amountGamesUntilIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    amountGamesUntilNewTrump(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfRaffleTokens(overrides?: CallOverrides): Promise<BigNumber>;

    baseGameDuration(overrides?: CallOverrides): Promise<BigNumber>;

    blackTable(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        serialNumber: BigNumber;
        playersNow: number;
        readyToClaimAt: BigNumber;
        timeUntilRaffleExecution: BigNumber;
        lastGameFinishedAt: BigNumber;
        stakingRate: BigNumber;
        amountPlayersUntilCurrentRaffle: BigNumber;
        amountWinnersToPayout: BigNumber;
        amountTokensForRaffle: BigNumber;
        raffleNFTTokenId: BigNumber;
        status: BigNumber;
      }
    >;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bulkCheckNotTransferable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakingRewardsInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkInMemoryArray(
      tempArr: PromiseOrValue<BigNumberish>[],
      _currentIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReadyTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimStakingTokensFromBlackRoom(overrides?: CallOverrides): Promise<void>;

    cooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

    createTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentAmountGamesFinished(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoomGameDuration(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decrPlayersNowInBlackTable(overrides?: CallOverrides): Promise<void>;

    decrPlayersNowinBlack(overrides?: CallOverrides): Promise<void>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    estimateStakingRewardsInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateRandomWinnerIndexInBlackRoom(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveTablesForPlayer(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    getActiveTablesForRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTable(
      overrides?: CallOverrides
    ): Promise<GameContract.BlackTableStructStructOutput>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlackTablePlayersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayersNow(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableReadyToClaimAt(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomSuit(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTablesClaimReadyInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getTimeWhenTableIsClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue1(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getValue2(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    globalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

    helper(overrides?: CallOverrides): Promise<string>;

    helper1(overrides?: CallOverrides): Promise<string>;

    incrBlackTableSerialNumber(overrides?: CallOverrides): Promise<void>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incrPlayersNowinBlack(overrides?: CallOverrides): Promise<void>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isDoubleIncrNFTRoomLevel(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMintPass(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwnerOfRaffleNFT(overrides?: CallOverrides): Promise<boolean>;

    isTableClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    leaveBlackTable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    leaveGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    prizeRadioChoice(overrides?: CallOverrides): Promise<BigNumber>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    raffleNFTTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    refandRate(overrides?: CallOverrides): Promise<BigNumber>;

    refundYourNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    returnSerialNumber(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnTimesPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roomGameDurationIncreaseCounter(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmountGamesUntilIncrease(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAmountGamesUntilNewTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseGameDuration(
      _newTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPrizeRadioChoise(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRefundRate(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      _amountTokensRaffle: PromiseOrValue<BigNumberish>,
      _raffleNFTTokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    trump(overrides?: CallOverrides): Promise<BigNumber>;

    trumpCounter(overrides?: CallOverrides): Promise<BigNumber>;

    viewAmountTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewGlobalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

    viewHelper(overrides?: CallOverrides): Promise<string>;

    viewHelper1(overrides?: CallOverrides): Promise<string>;

    viewTrump(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "ClaimedStakingTokens(address,uint256,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      claimTimestamp?: PromiseOrValue<BigNumberish> | null
    ): ClaimedStakingTokensEventFilter;
    ClaimedStakingTokens(
      player?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      claimTimestamp?: PromiseOrValue<BigNumberish> | null
    ): ClaimedStakingTokensEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "blackRoomClaimedPrizeMintPass(address[],uint256[],uint256)"(
      tempWinners?: null,
      tempInvolvedTokenIds?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeMintPassEventFilter;
    blackRoomClaimedPrizeMintPass(
      tempWinners?: null,
      tempInvolvedTokenIds?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeMintPassEventFilter;

    "blackRoomClaimedPrizeRaffleNFT(address,uint256,uint256)"(
      winner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleNFTEventFilter;
    blackRoomClaimedPrizeRaffleNFT(
      winner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleNFTEventFilter;

    "blackRoomClaimedPrizeRaffleToken(address[],uint256,uint256)"(
      tempWinners?: null,
      value?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleTokenEventFilter;
    blackRoomClaimedPrizeRaffleToken(
      tempWinners?: null,
      value?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleTokenEventFilter;

    "some(uint256[])"(_data?: null): someEventFilter;
    some(_data?: null): someEventFilter;
  };

  estimateGas: {
    ClaimSingleGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Collection(overrides?: CallOverrides): Promise<BigNumber>;

    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetWholeRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    RaffleNFT(overrides?: CallOverrides): Promise<BigNumber>;

    RaffleToken(overrides?: CallOverrides): Promise<BigNumber>;

    Reduct(overrides?: CallOverrides): Promise<BigNumber>;

    acceptMoney(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPlayerByPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      place: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    advancedBulkEnterInGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    advancedBulkEnterInGameWithPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _placeIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountGamesUntilIncrease(overrides?: CallOverrides): Promise<BigNumber>;

    amountGamesUntilNewTrump(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOfRaffleTokens(overrides?: CallOverrides): Promise<BigNumber>;

    baseGameDuration(overrides?: CallOverrides): Promise<BigNumber>;

    blackTable(overrides?: CallOverrides): Promise<BigNumber>;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkCheckNotTransferable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateStakingRewardsInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkInMemoryArray(
      tempArr: PromiseOrValue<BigNumberish>[],
      _currentIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimReadyTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimStakingTokensFromBlackRoom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

    createTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentAmountGamesFinished(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRoomGameDuration(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrPlayersNowInBlackTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    estimateStakingRewardsInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateRandomWinnerIndexInBlackRoom(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveTablesForPlayer(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActiveTablesForRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTable(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePlayersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayersNow(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableReadyToClaimAt(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRandomSuit(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTablesClaimReadyInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTimeWhenTableIsClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue1(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValue2(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

    helper(overrides?: CallOverrides): Promise<BigNumber>;

    helper1(overrides?: CallOverrides): Promise<BigNumber>;

    incrBlackTableSerialNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isDoubleIncrNFTRoomLevel(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMintPass(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwnerOfRaffleNFT(overrides?: CallOverrides): Promise<BigNumber>;

    isTableClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    leaveBlackTable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leaveGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    prizeRadioChoice(overrides?: CallOverrides): Promise<BigNumber>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    raffleNFTTokenId(overrides?: CallOverrides): Promise<BigNumber>;

    refandRate(overrides?: CallOverrides): Promise<BigNumber>;

    refundYourNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    returnSerialNumber(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnTimesPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roomGameDurationIncreaseCounter(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAmountGamesUntilIncrease(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAmountGamesUntilNewTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseGameDuration(
      _newTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPrizeRadioChoise(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRefundRate(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      _amountTokensRaffle: PromiseOrValue<BigNumberish>,
      _raffleNFTTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    trump(overrides?: CallOverrides): Promise<BigNumber>;

    trumpCounter(overrides?: CallOverrides): Promise<BigNumber>;

    viewAmountTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewCooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewGlobalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

    viewHelper(overrides?: CallOverrides): Promise<BigNumber>;

    viewHelper1(overrides?: CallOverrides): Promise<BigNumber>;

    viewTrump(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ClaimSingleGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Collection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetWholeRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RaffleNFT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RaffleToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Reduct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptMoney(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPlayerByPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      place: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    advancedBulkEnterInGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    advancedBulkEnterInGameWithPlace(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _placeIndexes: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allTables(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountGamesUntilIncrease(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountGamesUntilNewTrump(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfRaffleTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseGameDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blackTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkCheckNotTransferable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateStakingRewardsInBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkInMemoryArray(
      tempArr: PromiseOrValue<BigNumberish>[],
      _currentIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimReadyTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimStakingTokensFromBlackRoom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cooldownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentAmountGamesFinished(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRoomGameDuration(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrPlayersNowInBlackTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    estimateStakingRewardsInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateRandomWinnerIndexInBlackRoom(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveTablesForPlayer(
      _who: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActiveTablesForRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayersLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayersNow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableReadyToClaimAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameDuration(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayersNowInBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRandomSuit(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTablesClaimReadyInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTimeWhenTableIsClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValue1(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValue2(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalLastGameFinishedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    helper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    helper1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incrBlackTableSerialNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isDoubleIncrNFTRoomLevel(
      salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMintPass(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwnerOfRaffleNFT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTableClaimReady(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leaveBlackTable(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leaveGame(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prizeRadioChoice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    raffleNFTTokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refandRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundYourNFT(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    returnSerialNumber(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnTimesPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roomGameDurationIncreaseCounter(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAmountGamesUntilIncrease(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAmountGamesUntilNewTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseGameDuration(
      _newTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPrizeRadioChoise(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRefundRate(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      _amountTokensRaffle: PromiseOrValue<BigNumberish>,
      _raffleNFTTokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTrump(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    trump(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    trumpCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewAmountTablesInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewCooldownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewGlobalLastGameFinishedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewHelper1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewTrump(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
