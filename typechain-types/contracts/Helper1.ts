/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Helper1 {
  export type BlackTableWinnersInfoStruct = {
    tempWinners: PromiseOrValue<BigNumberish>[];
    tempInvolvedTokenIds: PromiseOrValue<BigNumberish>[];
    tempWinnersAddresses: PromiseOrValue<string>[];
  };

  export type BlackTableWinnersInfoStructOutput = [
    BigNumber[],
    BigNumber[],
    string[]
  ] & {
    tempWinners: BigNumber[];
    tempInvolvedTokenIds: BigNumber[];
    tempWinnersAddresses: string[];
  };
}

export interface Helper1Interface extends utils.Interface {
  functions: {
    "Collection()": FunctionFragment;
    "GameContract()": FunctionFragment;
    "blackTableClaimed(address)": FunctionFragment;
    "claimBlackRoom(uint256)": FunctionFragment;
    "claimBlackRoomForPlayer(uint256)": FunctionFragment;
    "findValueInArray(uint256,uint256[])": FunctionFragment;
    "generateWinnersForBlackRoom(uint256)": FunctionFragment;
    "getBlackTableWinnersInfo()": FunctionFragment;
    "getBlackTableWinnersInfoOne()": FunctionFragment;
    "getBlackTableWinnersInfoWinners()": FunctionFragment;
    "getBlackTableWinnersInfoWinnersByPlaces()": FunctionFragment;
    "globalDeterminationBlackTable(uint256)": FunctionFragment;
    "helper()": FunctionFragment;
    "initBlackTableWinners()": FunctionFragment;
    "isValueInArray(uint256,uint256[])": FunctionFragment;
    "returnSMH()": FunctionFragment;
    "setGameContract(address)": FunctionFragment;
    "setHelper(address)": FunctionFragment;
    "wasDetermined()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Collection"
      | "GameContract"
      | "blackTableClaimed"
      | "claimBlackRoom"
      | "claimBlackRoomForPlayer"
      | "findValueInArray"
      | "generateWinnersForBlackRoom"
      | "getBlackTableWinnersInfo"
      | "getBlackTableWinnersInfoOne"
      | "getBlackTableWinnersInfoWinners"
      | "getBlackTableWinnersInfoWinnersByPlaces"
      | "globalDeterminationBlackTable"
      | "helper"
      | "initBlackTableWinners"
      | "isValueInArray"
      | "returnSMH"
      | "setGameContract"
      | "setHelper"
      | "wasDetermined"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Collection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GameContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blackTableClaimed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBlackRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBlackRoomForPlayer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "findValueInArray",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "generateWinnersForBlackRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableWinnersInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableWinnersInfoOne",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableWinnersInfoWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableWinnersInfoWinnersByPlaces",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalDeterminationBlackTable",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "helper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initBlackTableWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValueInArray",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(functionFragment: "returnSMH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGameContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setHelper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wasDetermined",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "Collection", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blackTableClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBlackRoomForPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findValueInArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateWinnersForBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableWinnersInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableWinnersInfoOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableWinnersInfoWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableWinnersInfoWinnersByPlaces",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalDeterminationBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "helper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initBlackTableWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValueInArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "returnSMH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGameContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHelper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wasDetermined",
    data: BytesLike
  ): Result;

  events: {
    "blackRoomClaimedPrizeMintPass(address[],uint256[],uint256)": EventFragment;
    "blackRoomClaimedPrizeRaffleNFT(address,uint256,uint256)": EventFragment;
    "blackRoomClaimedPrizeRaffleToken(address[],uint256,uint256)": EventFragment;
    "blackRoomWinnersDetermined(uint256[],address[],uint256[])": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "blackRoomClaimedPrizeMintPass"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "blackRoomClaimedPrizeRaffleNFT"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "blackRoomClaimedPrizeRaffleToken"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "blackRoomWinnersDetermined"): EventFragment;
}

export interface blackRoomClaimedPrizeMintPassEventObject {
  tempWinnersAddresses: string[];
  tempInvolvedTokenIds: BigNumber[];
  prizeRadioChoice: BigNumber;
}
export type blackRoomClaimedPrizeMintPassEvent = TypedEvent<
  [string[], BigNumber[], BigNumber],
  blackRoomClaimedPrizeMintPassEventObject
>;

export type blackRoomClaimedPrizeMintPassEventFilter =
  TypedEventFilter<blackRoomClaimedPrizeMintPassEvent>;

export interface blackRoomClaimedPrizeRaffleNFTEventObject {
  winner: string;
  tokenId: BigNumber;
  prizeRadioChoice: BigNumber;
}
export type blackRoomClaimedPrizeRaffleNFTEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  blackRoomClaimedPrizeRaffleNFTEventObject
>;

export type blackRoomClaimedPrizeRaffleNFTEventFilter =
  TypedEventFilter<blackRoomClaimedPrizeRaffleNFTEvent>;

export interface blackRoomClaimedPrizeRaffleTokenEventObject {
  tempWinnersAddresses: string[];
  value: BigNumber;
  prizeRadioChoice: BigNumber;
}
export type blackRoomClaimedPrizeRaffleTokenEvent = TypedEvent<
  [string[], BigNumber, BigNumber],
  blackRoomClaimedPrizeRaffleTokenEventObject
>;

export type blackRoomClaimedPrizeRaffleTokenEventFilter =
  TypedEventFilter<blackRoomClaimedPrizeRaffleTokenEvent>;

export interface blackRoomWinnersDeterminedEventObject {
  tempWinners: BigNumber[];
  tempWinnersAddresses: string[];
  tempInvolvedTokenIds: BigNumber[];
}
export type blackRoomWinnersDeterminedEvent = TypedEvent<
  [BigNumber[], string[], BigNumber[]],
  blackRoomWinnersDeterminedEventObject
>;

export type blackRoomWinnersDeterminedEventFilter =
  TypedEventFilter<blackRoomWinnersDeterminedEvent>;

export interface Helper1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Helper1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Collection(overrides?: CallOverrides): Promise<[string]>;

    GameContract(overrides?: CallOverrides): Promise<[string]>;

    blackTableClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimBlackRoomForPlayer(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    generateWinnersForBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBlackTableWinnersInfo(
      overrides?: CallOverrides
    ): Promise<[Helper1.BlackTableWinnersInfoStructOutput]>;

    getBlackTableWinnersInfoOne(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTableWinnersInfoWinners(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBlackTableWinnersInfoWinnersByPlaces(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    globalDeterminationBlackTable(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    helper(overrides?: CallOverrides): Promise<[string]>;

    initBlackTableWinners(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    returnSMH(overrides?: CallOverrides): Promise<[BigNumber]>;

    setGameContract(
      _GameContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHelper(
      _helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wasDetermined(overrides?: CallOverrides): Promise<[boolean]>;
  };

  Collection(overrides?: CallOverrides): Promise<string>;

  GameContract(overrides?: CallOverrides): Promise<string>;

  blackTableClaimed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimBlackRoom(
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimBlackRoomForPlayer(
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findValueInArray(
    _value: PromiseOrValue<BigNumberish>,
    _verifiableArray: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  generateWinnersForBlackRoom(
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBlackTableWinnersInfo(
    overrides?: CallOverrides
  ): Promise<Helper1.BlackTableWinnersInfoStructOutput>;

  getBlackTableWinnersInfoOne(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTableWinnersInfoWinners(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBlackTableWinnersInfoWinnersByPlaces(
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  globalDeterminationBlackTable(
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  helper(overrides?: CallOverrides): Promise<string>;

  initBlackTableWinners(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isValueInArray(
    _value: PromiseOrValue<BigNumberish>,
    _verifiableArray: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  returnSMH(overrides?: CallOverrides): Promise<BigNumber>;

  setGameContract(
    _GameContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHelper(
    _helper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wasDetermined(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    Collection(overrides?: CallOverrides): Promise<string>;

    GameContract(overrides?: CallOverrides): Promise<string>;

    blackTableClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBlackRoomForPlayer(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    findValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateWinnersForBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBlackTableWinnersInfo(
      overrides?: CallOverrides
    ): Promise<Helper1.BlackTableWinnersInfoStructOutput>;

    getBlackTableWinnersInfoOne(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableWinnersInfoWinners(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBlackTableWinnersInfoWinnersByPlaces(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    globalDeterminationBlackTable(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    helper(overrides?: CallOverrides): Promise<string>;

    initBlackTableWinners(overrides?: CallOverrides): Promise<void>;

    isValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    returnSMH(overrides?: CallOverrides): Promise<BigNumber>;

    setGameContract(
      _GameContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setHelper(
      _helper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wasDetermined(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "blackRoomClaimedPrizeMintPass(address[],uint256[],uint256)"(
      tempWinnersAddresses?: null,
      tempInvolvedTokenIds?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeMintPassEventFilter;
    blackRoomClaimedPrizeMintPass(
      tempWinnersAddresses?: null,
      tempInvolvedTokenIds?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeMintPassEventFilter;

    "blackRoomClaimedPrizeRaffleNFT(address,uint256,uint256)"(
      winner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleNFTEventFilter;
    blackRoomClaimedPrizeRaffleNFT(
      winner?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleNFTEventFilter;

    "blackRoomClaimedPrizeRaffleToken(address[],uint256,uint256)"(
      tempWinnersAddresses?: null,
      value?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleTokenEventFilter;
    blackRoomClaimedPrizeRaffleToken(
      tempWinnersAddresses?: null,
      value?: null,
      prizeRadioChoice?: null
    ): blackRoomClaimedPrizeRaffleTokenEventFilter;

    "blackRoomWinnersDetermined(uint256[],address[],uint256[])"(
      tempWinners?: null,
      tempWinnersAddresses?: null,
      tempInvolvedTokenIds?: null
    ): blackRoomWinnersDeterminedEventFilter;
    blackRoomWinnersDetermined(
      tempWinners?: null,
      tempWinnersAddresses?: null,
      tempInvolvedTokenIds?: null
    ): blackRoomWinnersDeterminedEventFilter;
  };

  estimateGas: {
    Collection(overrides?: CallOverrides): Promise<BigNumber>;

    GameContract(overrides?: CallOverrides): Promise<BigNumber>;

    blackTableClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimBlackRoomForPlayer(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateWinnersForBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBlackTableWinnersInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableWinnersInfoOne(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableWinnersInfoWinners(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableWinnersInfoWinnersByPlaces(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalDeterminationBlackTable(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    helper(overrides?: CallOverrides): Promise<BigNumber>;

    initBlackTableWinners(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    returnSMH(overrides?: CallOverrides): Promise<BigNumber>;

    setGameContract(
      _GameContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHelper(
      _helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wasDetermined(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Collection(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GameContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blackTableClaimed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimBlackRoomForPlayer(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateWinnersForBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBlackTableWinnersInfo(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableWinnersInfoOne(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableWinnersInfoWinners(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableWinnersInfoWinnersByPlaces(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalDeterminationBlackTable(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    helper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initBlackTableWinners(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isValueInArray(
      _value: PromiseOrValue<BigNumberish>,
      _verifiableArray: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnSMH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGameContract(
      _GameContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHelper(
      _helper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wasDetermined(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
