/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IGameContract {
  export type TableStruct = {
    serialNumber: PromiseOrValue<BigNumberish>;
    playersNow: PromiseOrValue<BigNumberish>;
    players: PromiseOrValue<string>[];
    playingTokenIds: PromiseOrValue<BigNumberish>[];
    playingSuits: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    currentGameStartedAt: PromiseOrValue<BigNumberish>;
    lastGameFinishedAt: PromiseOrValue<BigNumberish>;
    internalGameReduction: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type TableStructOutput = [
    BigNumber,
    number,
    string[],
    BigNumber[],
    [BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    serialNumber: BigNumber;
    playersNow: number;
    players: string[];
    playingTokenIds: BigNumber[];
    playingSuits: [BigNumber, BigNumber, BigNumber, BigNumber];
    currentGameStartedAt: BigNumber;
    lastGameFinishedAt: BigNumber;
    internalGameReduction: BigNumber;
    status: BigNumber;
  };

  export type BlackTableStructStruct = {
    serialNumber: PromiseOrValue<BigNumberish>;
    playersNow: PromiseOrValue<BigNumberish>;
    players: PromiseOrValue<string>[];
    playingTokenIds: PromiseOrValue<BigNumberish>[];
    playersTimeMarks: PromiseOrValue<BigNumberish>[];
    playingSuits: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
    readyToClaimAt: PromiseOrValue<BigNumberish>;
    timeUntilRaffleExecution: PromiseOrValue<BigNumberish>;
    lastGameFinishedAt: PromiseOrValue<BigNumberish>;
    internalGameReduction: PromiseOrValue<BigNumberish>;
    stakingRate: PromiseOrValue<BigNumberish>;
    amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>;
    amountWinnersToPayout: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type BlackTableStructStructOutput = [
    BigNumber,
    number,
    string[],
    BigNumber[],
    BigNumber[],
    [BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    serialNumber: BigNumber;
    playersNow: number;
    players: string[];
    playingTokenIds: BigNumber[];
    playersTimeMarks: BigNumber[];
    playingSuits: [BigNumber, BigNumber, BigNumber, BigNumber];
    readyToClaimAt: BigNumber;
    timeUntilRaffleExecution: BigNumber;
    lastGameFinishedAt: BigNumber;
    internalGameReduction: BigNumber;
    stakingRate: BigNumber;
    amountPlayersUntilCurrentRaffle: BigNumber;
    amountWinnersToPayout: BigNumber;
    status: BigNumber;
  };
}

export interface IGameContractInterface extends utils.Interface {
  functions: {
    "GetCurrentTableInRoom(uint8,uint256)": FunctionFragment;
    "addPlayer(uint8,uint256,uint256,address)": FunctionFragment;
    "addPlayingTokenId(uint8,uint256,uint256,uint256)": FunctionFragment;
    "bulkCheckNFTRoomLevel(uint256[],uint8)": FunctionFragment;
    "bulkEnterInBlackRoom(uint256[])": FunctionFragment;
    "checkAllGenesis(uint256[])": FunctionFragment;
    "checkOwnershipOfTokens(uint256[])": FunctionFragment;
    "claimBlackRoom(uint256)": FunctionFragment;
    "claimStakingTokensFromBlackRoom()": FunctionFragment;
    "decrPlayersNow(uint8,uint256)": FunctionFragment;
    "decrPlayersNowInBlackTable()": FunctionFragment;
    "decrPlayersNowinBlack()": FunctionFragment;
    "decrPlayingSuits(uint8,uint256,uint256,uint256)": FunctionFragment;
    "deletePlayerInBlackRoomByIndex(uint256,uint256)": FunctionFragment;
    "deletePlayerInBlackRoomByIndexV2(uint256)": FunctionFragment;
    "deletePlayerInTableByIndex(uint8,uint256,uint256,uint256)": FunctionFragment;
    "findAvailableTable(uint8,uint256)": FunctionFragment;
    "getAmountTokensRaffleInBlackRoom()": FunctionFragment;
    "getAmountWinnersToPayoutinBlackRoom()": FunctionFragment;
    "getBlackRoom()": FunctionFragment;
    "getBlackTable()": FunctionFragment;
    "getBlackTableAmountPlayersUntilCurrentRaffle()": FunctionFragment;
    "getBlackTableAmountWinnersToPayout()": FunctionFragment;
    "getBlackTablePlayerByIndex(uint256)": FunctionFragment;
    "getBlackTablePlayersLength()": FunctionFragment;
    "getBlackTablePlayersNow()": FunctionFragment;
    "getBlackTablePlayingTokenIdByIndex(uint256)": FunctionFragment;
    "getBlackTablePrizeRadioChoice()": FunctionFragment;
    "getBlackTableReadyToClaimAt()": FunctionFragment;
    "getBlackTableStatus()": FunctionFragment;
    "getBlackTableTimeUntilRaffleExecution()": FunctionFragment;
    "getIndexesOfPlayerInBlackRoom(address)": FunctionFragment;
    "getPlayerOnTableByIndex(uint8,uint256,uint256)": FunctionFragment;
    "getPlayersLengthInTable(uint8,uint256)": FunctionFragment;
    "getPlayersNowForTable(uint8,uint256)": FunctionFragment;
    "getPlayersNowInBlackRoom()": FunctionFragment;
    "getPlayingSuitsSlotForTableInRoom(uint8,uint256,uint256)": FunctionFragment;
    "getPlayingTokenIdInTableByIndex(uint8,uint256,uint256)": FunctionFragment;
    "getRaffleNFTTokenIdInBlackRoom()": FunctionFragment;
    "getStatusForTable(uint8,uint256)": FunctionFragment;
    "incrBlackTableSerialNumber()": FunctionFragment;
    "incrInternalGameReduction(uint8,uint256,uint256)": FunctionFragment;
    "incrPlayersNow(uint8,uint256)": FunctionFragment;
    "incrPlayersNowinBlack()": FunctionFragment;
    "incrPlayingSuits(uint8,uint256,uint256,uint256)": FunctionFragment;
    "isTableInRoomExists(uint8,uint256)": FunctionFragment;
    "pushInBlackTable(address,uint256,uint256)": FunctionFragment;
    "replaceInBlackTable(uint256,address,uint256,uint256)": FunctionFragment;
    "sendRaffleNFTToWinner(address,uint256)": FunctionFragment;
    "sendRaffleTokens(address,uint256)": FunctionFragment;
    "setBlackTableLastGameFinishedAt(uint256)": FunctionFragment;
    "setBlackTableStatus(uint256)": FunctionFragment;
    "setCurrentGameStartedAt(uint8,uint256,uint256)": FunctionFragment;
    "setGlobalLastGameFinishedAt(uint256)": FunctionFragment;
    "setIsMintPass(uint256,bool)": FunctionFragment;
    "setLastGameFinishedAt(uint8,uint256,uint256)": FunctionFragment;
    "setPlayersNowInTable(uint8,uint256,uint8)": FunctionFragment;
    "setReadyToClaimAtInBlack(uint256)": FunctionFragment;
    "setStakingRateinBlackRoom(uint256)": FunctionFragment;
    "setStatus(uint8,uint256,uint256)": FunctionFragment;
    "setStatusinBlack(uint256)": FunctionFragment;
    "setTempVariablesInBlackTableinBlack(uint256,uint256,uint256)": FunctionFragment;
    "setTimeUntilRaffleExecutionInBlack(uint256)": FunctionFragment;
    "viewCooldownTime()": FunctionFragment;
    "viewGlobalLastGameFinishedAt()": FunctionFragment;
    "viewTrump()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GetCurrentTableInRoom"
      | "addPlayer"
      | "addPlayingTokenId"
      | "bulkCheckNFTRoomLevel"
      | "bulkEnterInBlackRoom"
      | "checkAllGenesis"
      | "checkOwnershipOfTokens"
      | "claimBlackRoom"
      | "claimStakingTokensFromBlackRoom"
      | "decrPlayersNow"
      | "decrPlayersNowInBlackTable"
      | "decrPlayersNowinBlack"
      | "decrPlayingSuits"
      | "deletePlayerInBlackRoomByIndex"
      | "deletePlayerInBlackRoomByIndexV2"
      | "deletePlayerInTableByIndex"
      | "findAvailableTable"
      | "getAmountTokensRaffleInBlackRoom"
      | "getAmountWinnersToPayoutinBlackRoom"
      | "getBlackRoom"
      | "getBlackTable"
      | "getBlackTableAmountPlayersUntilCurrentRaffle"
      | "getBlackTableAmountWinnersToPayout"
      | "getBlackTablePlayerByIndex"
      | "getBlackTablePlayersLength"
      | "getBlackTablePlayersNow"
      | "getBlackTablePlayingTokenIdByIndex"
      | "getBlackTablePrizeRadioChoice"
      | "getBlackTableReadyToClaimAt"
      | "getBlackTableStatus"
      | "getBlackTableTimeUntilRaffleExecution"
      | "getIndexesOfPlayerInBlackRoom"
      | "getPlayerOnTableByIndex"
      | "getPlayersLengthInTable"
      | "getPlayersNowForTable"
      | "getPlayersNowInBlackRoom"
      | "getPlayingSuitsSlotForTableInRoom"
      | "getPlayingTokenIdInTableByIndex"
      | "getRaffleNFTTokenIdInBlackRoom"
      | "getStatusForTable"
      | "incrBlackTableSerialNumber"
      | "incrInternalGameReduction"
      | "incrPlayersNow"
      | "incrPlayersNowinBlack"
      | "incrPlayingSuits"
      | "isTableInRoomExists"
      | "pushInBlackTable"
      | "replaceInBlackTable"
      | "sendRaffleNFTToWinner"
      | "sendRaffleTokens"
      | "setBlackTableLastGameFinishedAt"
      | "setBlackTableStatus"
      | "setCurrentGameStartedAt"
      | "setGlobalLastGameFinishedAt"
      | "setIsMintPass"
      | "setLastGameFinishedAt"
      | "setPlayersNowInTable"
      | "setReadyToClaimAtInBlack"
      | "setStakingRateinBlackRoom"
      | "setStatus"
      | "setStatusinBlack"
      | "setTempVariablesInBlackTableinBlack"
      | "setTimeUntilRaffleExecutionInBlack"
      | "viewCooldownTime"
      | "viewGlobalLastGameFinishedAt"
      | "viewTrump"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GetCurrentTableInRoom",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlayer",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addPlayingTokenId",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkCheckNFTRoomLevel",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkEnterInBlackRoom",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAllGenesis",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkOwnershipOfTokens",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBlackRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimStakingTokensFromBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayersNow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayersNowInBlackTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayersNowinBlack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrPlayingSuits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePlayerInBlackRoomByIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePlayerInBlackRoomByIndexV2",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePlayerInTableByIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "findAvailableTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountTokensRaffleInBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountWinnersToPayoutinBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableAmountPlayersUntilCurrentRaffle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableAmountWinnersToPayout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayerByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayersLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayersNow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePlayingTokenIdByIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTablePrizeRadioChoice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableReadyToClaimAt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackTableTimeUntilRaffleExecution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIndexesOfPlayerInBlackRoom",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerOnTableByIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayersLengthInTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayersNowForTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayersNowInBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayingSuitsSlotForTableInRoom",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayingTokenIdInTableByIndex",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleNFTTokenIdInBlackRoom",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStatusForTable",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incrBlackTableSerialNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrInternalGameReduction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "incrPlayersNow",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "incrPlayersNowinBlack",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrPlayingSuits",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTableInRoomExists",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pushInBlackTable",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "replaceInBlackTable",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRaffleNFTToWinner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendRaffleTokens",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackTableLastGameFinishedAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackTableStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentGameStartedAt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setGlobalLastGameFinishedAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIsMintPass",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastGameFinishedAt",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlayersNowInTable",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setReadyToClaimAtInBlack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakingRateinBlackRoom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatusinBlack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTempVariablesInBlackTableinBlack",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimeUntilRaffleExecutionInBlack",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCooldownTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewGlobalLastGameFinishedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "viewTrump", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "GetCurrentTableInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPlayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPlayingTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkCheckNFTRoomLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkEnterInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAllGenesis",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkOwnershipOfTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimStakingTokensFromBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayersNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayersNowInBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayersNowinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrPlayingSuits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePlayerInBlackRoomByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePlayerInBlackRoomByIndexV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePlayerInTableByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "findAvailableTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountTokensRaffleInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountWinnersToPayoutinBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableAmountPlayersUntilCurrentRaffle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableAmountWinnersToPayout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayersNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePlayingTokenIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTablePrizeRadioChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableReadyToClaimAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackTableTimeUntilRaffleExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIndexesOfPlayerInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerOnTableByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayersLengthInTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayersNowForTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayersNowInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayingSuitsSlotForTableInRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayingTokenIdInTableByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleNFTTokenIdInBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatusForTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrBlackTableSerialNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrInternalGameReduction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrPlayersNow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrPlayersNowinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrPlayingSuits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTableInRoomExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushInBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "replaceInBlackTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRaffleNFTToWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendRaffleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackTableLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackTableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentGameStartedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGlobalLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsMintPass",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlayersNowInTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReadyToClaimAtInBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakingRateinBlackRoom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStatusinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTempVariablesInBlackTableinBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimeUntilRaffleExecutionInBlack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCooldownTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewGlobalLastGameFinishedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "viewTrump", data: BytesLike): Result;

  events: {};
}

export interface IGameContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGameContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IGameContract.TableStructOutput]>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimStakingTokensFromBlackRoom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrPlayersNowInBlackTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackRoom(
      overrides?: CallOverrides
    ): Promise<[IGameContract.BlackTableStructStructOutput]>;

    getBlackTable(
      overrides?: CallOverrides
    ): Promise<[IGameContract.BlackTableStructStructOutput]>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBlackTablePlayersLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlackTablePlayersNow(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTableReadyToClaimAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBlackTableStatus(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    incrBlackTableSerialNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPlayersNowInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewCooldownTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    viewGlobalLastGameFinishedAt(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewTrump(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  GetCurrentTableInRoom(
    _room: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IGameContract.TableStructOutput>;

  addPlayer(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addPlayingTokenId(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bulkCheckNFTRoomLevel(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    _roomLevel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  bulkEnterInBlackRoom(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkAllGenesis(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkOwnershipOfTokens(
    _tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimBlackRoom(
    _salt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimStakingTokensFromBlackRoom(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrPlayersNow(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrPlayersNowInBlackTable(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrPlayersNowinBlack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decrPlayingSuits(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePlayerInBlackRoomByIndex(
    _index: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePlayerInBlackRoomByIndexV2(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deletePlayerInTableByIndex(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  findAvailableTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _remainAllocation: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountTokensRaffleInBlackRoom(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountWinnersToPayoutinBlackRoom(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackRoom(
    overrides?: CallOverrides
  ): Promise<IGameContract.BlackTableStructStructOutput>;

  getBlackTable(
    overrides?: CallOverrides
  ): Promise<IGameContract.BlackTableStructStructOutput>;

  getBlackTableAmountPlayersUntilCurrentRaffle(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackTableAmountWinnersToPayout(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackTablePlayerByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlackTablePlayersLength(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTablePlayersNow(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTablePlayingTokenIdByIndex(
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBlackTablePrizeRadioChoice(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTableReadyToClaimAt(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTableStatus(overrides?: CallOverrides): Promise<BigNumber>;

  getBlackTableTimeUntilRaffleExecution(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIndexesOfPlayerInBlackRoom(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPlayerOnTableByIndex(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPlayersLengthInTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayersNowForTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

  getPlayingSuitsSlotForTableInRoom(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _slot: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayingTokenIdInTableByIndex(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRaffleNFTTokenIdInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

  getStatusForTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  incrBlackTableSerialNumber(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrInternalGameReduction(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrPlayersNow(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrPlayersNowinBlack(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  incrPlayingSuits(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _index: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isTableInRoomExists(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pushInBlackTable(
    _player: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  replaceInBlackTable(
    _index: PromiseOrValue<BigNumberish>,
    _player: PromiseOrValue<string>,
    _timestamp: PromiseOrValue<BigNumberish>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRaffleNFTToWinner(
    _winner: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendRaffleTokens(
    _who: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlackTableLastGameFinishedAt(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBlackTableStatus(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrentGameStartedAt(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGlobalLastGameFinishedAt(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIsMintPass(
    _tokenId: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLastGameFinishedAt(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPlayersNowInTable(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReadyToClaimAtInBlack(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakingRateinBlackRoom(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStatus(
    _roomLevel: PromiseOrValue<BigNumberish>,
    _table: PromiseOrValue<BigNumberish>,
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStatusinBlack(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTempVariablesInBlackTableinBlack(
    _stakingRate: PromiseOrValue<BigNumberish>,
    _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
    _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTimeUntilRaffleExecutionInBlack(
    _value: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewCooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

  viewGlobalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

  viewTrump(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IGameContract.TableStructOutput>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimStakingTokensFromBlackRoom(overrides?: CallOverrides): Promise<void>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    decrPlayersNowInBlackTable(overrides?: CallOverrides): Promise<void>;

    decrPlayersNowinBlack(overrides?: CallOverrides): Promise<void>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackRoom(
      overrides?: CallOverrides
    ): Promise<IGameContract.BlackTableStructStructOutput>;

    getBlackTable(
      overrides?: CallOverrides
    ): Promise<IGameContract.BlackTableStructStructOutput>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlackTablePlayersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayersNow(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableReadyToClaimAt(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrBlackTableSerialNumber(overrides?: CallOverrides): Promise<void>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    incrPlayersNowinBlack(overrides?: CallOverrides): Promise<void>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPlayersNowInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    viewCooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewGlobalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

    viewTrump(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimStakingTokensFromBlackRoom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrPlayersNowInBlackTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTable(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePlayersLength(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayersNow(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlackTableReadyToClaimAt(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableStatus(overrides?: CallOverrides): Promise<BigNumber>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayersNowInBlackRoom(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrBlackTableSerialNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPlayersNowInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewCooldownTime(overrides?: CallOverrides): Promise<BigNumber>;

    viewGlobalLastGameFinishedAt(overrides?: CallOverrides): Promise<BigNumber>;

    viewTrump(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    GetCurrentTableInRoom(
      _room: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addPlayer(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addPlayingTokenId(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bulkCheckNFTRoomLevel(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      _roomLevel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bulkEnterInBlackRoom(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkAllGenesis(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkOwnershipOfTokens(
      _tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimBlackRoom(
      _salt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimStakingTokensFromBlackRoom(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrPlayersNowInBlackTable(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePlayerInBlackRoomByIndex(
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePlayerInBlackRoomByIndexV2(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deletePlayerInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    findAvailableTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _remainAllocation: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountTokensRaffleInBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountWinnersToPayoutinBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackRoom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlackTable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlackTableAmountPlayersUntilCurrentRaffle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableAmountWinnersToPayout(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayerByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayersLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayersNow(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePlayingTokenIdByIndex(
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTablePrizeRadioChoice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableReadyToClaimAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlackTableTimeUntilRaffleExecution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIndexesOfPlayerInBlackRoom(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerOnTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayersLengthInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayersNowForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayersNowInBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayingSuitsSlotForTableInRoom(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _slot: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayingTokenIdInTableByIndex(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRaffleNFTTokenIdInBlackRoom(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStatusForTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incrBlackTableSerialNumber(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrInternalGameReduction(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrPlayersNow(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrPlayersNowinBlack(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    incrPlayingSuits(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _index: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isTableInRoomExists(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pushInBlackTable(
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    replaceInBlackTable(
      _index: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      _timestamp: PromiseOrValue<BigNumberish>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRaffleNFTToWinner(
      _winner: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendRaffleTokens(
      _who: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlackTableLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBlackTableStatus(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentGameStartedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGlobalLastGameFinishedAt(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIsMintPass(
      _tokenId: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLastGameFinishedAt(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPlayersNowInTable(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReadyToClaimAtInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakingRateinBlackRoom(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStatus(
      _roomLevel: PromiseOrValue<BigNumberish>,
      _table: PromiseOrValue<BigNumberish>,
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStatusinBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTempVariablesInBlackTableinBlack(
      _stakingRate: PromiseOrValue<BigNumberish>,
      _amountPlayersUntilCurrentRaffle: PromiseOrValue<BigNumberish>,
      _amountWinnersToPayout: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTimeUntilRaffleExecutionInBlack(
      _value: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewCooldownTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    viewGlobalLastGameFinishedAt(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewTrump(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
